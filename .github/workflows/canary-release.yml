name: Canary Release

on:
  push:
    branches:
      - canary
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository}}-web
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.web
          push: true
          tags: ghcr.io/${{ github.repository }}:canary
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Generate Kubernetes manifest
        shell: pwsh
        run: |
          $app_name = "${{ github.repository }}-canary".Replace("/", "-")
          $app_name | Out-File -FilePath appname.txt
          $dnsname =$app_name + ".${{ vars.DOMAIN }}" 
          @"
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: $app_name
              labels:
                app: $app_name
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: $app_name
              template:
                metadata:
                  labels:
                    app: $app_name
                spec:
                  containers:
                    - name: $app_name
                      image: ghcr.io/${{ github.repository }}:canary
                      imagePullPolicy: Always
                      ports:
                        - containerPort: 4444
                      env:
                        - name: NATS
                          value: nats://nats:4222


          "@ | Out-File -FilePath deployment.yml
          @"

            apiVersion: v1
            kind: Service
            metadata:
              name: $app_name
              labels:
                app: $app_name
                service: $app_name
            spec:
              ports:
                - name: http
                  port: 5301
                  targetPort: 4444
              selector:
                app: $app_name

          "@ | Out-File -FilePath service.yml
          @"
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              name: $app_name
            spec:
              rules:
                - host: $dnsname
                  http:
                    paths:
                      - path: /
                        pathType: Prefix
                        backend:
                          service:
                            name: $app_name
                            port:
                              number: 5301
          "@ | Out-File -FilePath ingress.yml

      - name: Log in to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          az aks get-credentials --resource-group ${{ vars.AZURE_RG }} --name ${{ vars.AZURE_AKS }}

      - name: Deploy to AKS
        run: |
          cat deployment.yml
          kubectl apply -f deployment.yml -n ${{ vars.K8_NAMESPACE }}

          cat service.yml
          kubectl apply -f service.yml -n ${{ vars.K8_NAMESPACE }}

          cat ingress.yml
          kubectl apply -f ingress.yml -n ${{ vars.K8_NAMESPACE }}

      - name: Restart Deployment
        shell: pwsh
        run: |
          $app_name = Get-Content -Path appname.txt
          kubectl rollout restart deployment/$app_name -n ${{ vars.K8_NAMESPACE }}
